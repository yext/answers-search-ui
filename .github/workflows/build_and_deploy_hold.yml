name: Build and deploy with a hold state

on:
  push:
    tags:
      - 'v*'

jobs:
  call_build:
    uses: ./.github/workflows/build.yml
    with:
      build_script: build-locales

  call_unit_test:
    uses: ./.github/workflows/unit_test.yml
    needs: call_build

  call_misc_tests:
    uses: ./.github/workflows/miscellaneous_tests.yml

  call_acceptance:
    uses: ./.github/workflows/acceptance.yml
    needs: call_build
    secrets:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}

  call_format_branch_name:
    uses: ./.github/workflows/format_branch_name.yml

  extract_versions:
    runs-on: ubuntu-latest
    outputs:
      minor_version: ${{ steps.vars.outputs.minor_version }}
      major_version: ${{ steps.vars.outputs.major_version }}
    steps:
      - name: extract major and minor substrings
        id: vars
        run: |
          MINOR_VERSION="$(echo "${{ github.ref_name }}" | cut -d '.' -f 1,2)"  
          echo $MINOR_VERSION
          echo ::set-output name=minor_version::${MINOR_VERSION}
          MAJOR_VERSION="$(echo "${{ github.ref_name }}" | cut -d '.' -f 1)"
          echo $MAJOR_VERSION
          echo ::set-output name=major_version::${MAJOR_VERSION}

  should_deploy_major_version:
    runs-on: ubuntu-latest
    outputs:
      deploy_major_version: ${{ steps.vars.outputs.deploy_major_version }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: allow for major version deployment if the next minor version from current tag does not exist
        id: vars
        run: |
          MINOR_VERSION=$(echo "${{ github.ref_name }}" | cut -d '.' -f 2) 
          MAJOR_VERSION=$(echo "${{ github.ref_name }}" | cut -d '.' -f 1)
          NEXT_MINOR_VERSION=$(( $MINOR_VERSION + 1 ))
          OUTPUT=$(git tag --list "$MAJOR_VERSION.$NEXT_MINOR_VERSION.*")
          if [ -z $OUTPUT ]
          then
            echo ::set-output name=deploy_major_version::true
          fi

  call_deploy_tag_version:
    needs: 
      - call_unit_test
      - call_format_branch_name
      - call_acceptance
      - extract_versions
      - call_misc_tests
    uses: ./.github/workflows/deploy_hold.yml
    with:
      directory: ${{ github.ref_name }}
      cache-control: 'max-age=31536000'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  call_deploy_major_version:
    needs: 
      - call_unit_test
      - call_format_branch_name
      - call_acceptance
      - extract_versions
      - call_misc_tests
      - should_deploy_major_version
    if: ${{ needs.should_deploy_major_version.outputs.deploy_major_version }}
    uses: ./.github/workflows/deploy_hold.yml
    with:
      directory: ${{ needs.extract_versions.outputs.major_version }}
      cache-control: 'max-age=43200'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  call_deploy_minor_version:
    needs: 
      - call_unit_test
      - call_format_branch_name
      - call_acceptance
      - extract_versions
      - call_misc_tests
    uses: ./.github/workflows/deploy_hold.yml
    with:
      directory: ${{ needs.extract_versions.outputs.minor_version }}
      cache-control: 'max-age=43200'
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

concurrency:
  group: ci-build-and-deploy-hold-${{ github.ref }}-1
  cancel-in-progress: true